package com.alecocluc.musify.adapters

import android.content.Context
import android.media.MediaPlayer
import android.os.Handler
import android.os.Looper
import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.RecyclerView
import com.alecocluc.musify.R
import com.alecocluc.musify.databinding.ItemSongBinding
import com.alecocluc.musify.databinding.ItemSongSearchBinding
import com.alecocluc.musify.models.Song
import com.squareup.picasso.Picasso

// Enum para distinguir los tipos de vista
enum class ViewType {
    SEARCH,
    LIBRARY
}

class SongAdapter(
    var songs: List<Song>,
    private val viewType: ViewType,  // Parámetro para distinguir los fragmentos
    private val onFavoriteClick: (Song) -> Unit,
    private val onRemoveFavoriteClick: ((Song) -> Unit)? = null,
    private val showSavedIcon: Boolean = false
) : RecyclerView.Adapter<SongAdapter.SongViewHolder>() {

    private var mediaPlayer: MediaPlayer? = null
    private var currentPlayingPosition: Int = -1
    private val handler = Handler(Looper.getMainLooper())

    // Limpia el estado de la canción anterior
    private fun clearPreviousSongState() {
        mediaPlayer?.release()
        mediaPlayer = null
        if (currentPlayingPosition != -1) {
            notifyItemChanged(currentPlayingPosition)
            currentPlayingPosition = -1
        }
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): SongViewHolder {
        val inflater = LayoutInflater.from(parent.context)

        // Inflar el layout correcto según el tipo de vista proporcionado
        return when (this.viewType) {
            ViewType.SEARCH -> {
                val binding = ItemSongSearchBinding.inflate(inflater, parent, false)
                SongViewHolder.SearchViewHolder(binding, parent.context)
            }
            ViewType.LIBRARY -> {
                val binding = ItemSongBinding.inflate(inflater, parent, false)
                SongViewHolder.LibraryViewHolder(binding, parent.context)
            }
        }
    }

    override fun onBindViewHolder(holder: SongViewHolder, position: Int) {
        val song = songs[position]
        holder.bind(song)
    }

    override fun getItemCount(): Int = songs.size

    // Actualiza la lista de canciones
    fun updateSongs(newSongs: List<Song>) {
        songs = newSongs
        notifyDataSetChanged()
    }

    // Actualiza el estado de favorito de una canción específica
    fun updateFavoriteStatus(songId: Long, isFavorite: Boolean) {
        val songIndex = songs.indexOfFirst { it.id == songId }
        if (songIndex != -1) {
            val updatedSong = songs[songIndex].copy(isFavorite = isFavorite)
            songs = songs.toMutableList().apply {
                set(songIndex, updatedSong)
            }
            notifyItemChanged(songIndex)
        }
    }

    // Elimina una canción de la lista
    fun removeSong(songId: Long) {
        songs = songs.filterNot { it.id == songId }
        notifyDataSetChanged()
    }

    sealed class SongViewHolder(binding: Any, protected val context: Context) : RecyclerView.ViewHolder(
        (binding as? ItemSongBinding)?.root ?: (binding as ItemSongSearchBinding).root
    ) {

        abstract fun bind(song: Song)

        class LibraryViewHolder(
            private val binding: ItemSongBinding,
            context: Context
        ) : SongViewHolder(binding, context) {

            private val handler = Handler(Looper.getMainLooper())
            private var mediaPlayer: MediaPlayer? = null

            private val updateProgress = object : Runnable {
                override fun run() {
                    mediaPlayer?.let {
                        binding.progressBar.progress = it.currentPosition / 1000
                        handler.postDelayed(this, 1000)
                    }
                }
            }

            override fun bind(song: Song) {
                binding.songTitleTextView.text = song.title
                binding.artistNameTextView.text = song.artist
                binding.durationTextView.text = context.getString(R.string.song_duration, song.duration)
                Picasso.get().load(song.coverUrl).into(binding.coverImageView)

                // Configuración de favoritos
                if (song.isFavorite) {
                    binding.favoriteImageView.setImageResource(R.drawable.ic_star_saved)
                    binding.favoriteImageView.setOnClickListener { (bindingAdapter as SongAdapter).onRemoveFavoriteClick?.invoke(song) }
                } else {
                    binding.favoriteImageView.setImageResource(R.drawable.ic_star)
                    binding.favoriteImageView.setOnClickListener { (bindingAdapter as SongAdapter).onFavoriteClick(song) }
                }

                // Configuración de reproducción
                binding.playPauseImageView.setOnClickListener {
                    if (bindingAdapterPosition == (bindingAdapter as SongAdapter).currentPlayingPosition) {
                        // Si la canción ya está en reproducción
                        if (mediaPlayer?.isPlaying == true) {
                            mediaPlayer?.pause()
                            binding.playPauseImageView.setImageResource(R.drawable.ic_play)
                        } else {
                            mediaPlayer?.start()
                            binding.playPauseImageView.setImageResource(R.drawable.ic_pause)
                            handler.post(updateProgress)
                        }
                    } else {
                        (bindingAdapter as SongAdapter).clearPreviousSongState()
                        mediaPlayer = MediaPlayer().apply {
                            setDataSource(song.previewUrl)
                            prepareAsync()
                            setOnPreparedListener {
                                start()
                                binding.playPauseImageView.setImageResource(R.drawable.ic_pause)
                                binding.progressBar.max = duration / 1000
                                binding.progressBar.progress = 0
                                handler.post(updateProgress)
                            }
                            setOnCompletionListener {
                                binding.playPauseImageView.setImageResource(R.drawable.ic_play)
                                binding.progressBar.progress = 0
                                handler.removeCallbacks(updateProgress)
                                mediaPlayer?.release()
                                mediaPlayer = null
                            }
                        }
                        (bindingAdapter as SongAdapter).currentPlayingPosition = bindingAdapterPosition
                    }
                }
            }
        }

        class SearchViewHolder(
            private val binding: ItemSongSearchBinding,
            context: Context
        ) : SongViewHolder(binding, context) {

            private val handler = Handler(Looper.getMainLooper())
            private var mediaPlayer: MediaPlayer? = null

            private val updateProgress = object : Runnable {
                override fun run() {
                    mediaPlayer?.let {
                        // Update the progress bar with the current position
                        handler.postDelayed(this, 1000)
                    }
                }
            }

            override fun bind(song: Song) {
                binding.songTitleTextView.text = song.title
                binding.artistNameTextView.text = song.artist
                Picasso.get().load(song.coverUrl).into(binding.coverImageView)

                // Configuración de favoritos
                if (song.isFavorite) {
                    binding.favoriteImageView.setImageResource(R.drawable.ic_star_saved)
                    binding.favoriteImageView.setOnClickListener { (bindingAdapter as SongAdapter).onRemoveFavoriteClick?.invoke(song) }
                } else {
                    binding.favoriteImageView.setImageResource(R.drawable.ic_star)
                    binding.favoriteImageView.setOnClickListener { (bindingAdapter as SongAdapter).onFavoriteClick(song) }
                }

                // Configuración de reproducción
                binding.playPauseImageView.setOnClickListener {
                    if (bindingAdapterPosition == (bindingAdapter as SongAdapter).currentPlayingPosition) {
                        // Si la canción ya está en reproducción
                        if (mediaPlayer?.isPlaying == true) {
                            mediaPlayer?.pause()
                            binding.playPauseImageView.setImageResource(R.drawable.ic_play)
                        } else {
                            mediaPlayer?.start()
                            binding.playPauseImageView.setImageResource(R.drawable.ic_pause)
                            handler.post(updateProgress)
                        }
                    } else {
                        (bindingAdapter as SongAdapter).clearPreviousSongState()
                        mediaPlayer = MediaPlayer().apply {
                            setDataSource(song.previewUrl)
                            prepareAsync()
                            setOnPreparedListener {
                                start()
                                binding.playPauseImageView.setImageResource(R.drawable.ic_pause)
                                handler.post(updateProgress)
                            }
                            setOnCompletionListener {
                                binding.playPauseImageView.setImageResource(R.drawable.ic_play)
                                handler.removeCallbacks(updateProgress)
                                mediaPlayer?.release()
                                mediaPlayer = null
                            }
                        }
                        (bindingAdapter as SongAdapter).currentPlayingPosition = bindingAdapterPosition
                    }
                }
            }
        }
    }
}
