package com.alecocluc.musify.adapters

import android.content.Context
import android.media.MediaPlayer
import android.os.Handler
import android.os.Looper
import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.RecyclerView
import com.alecocluc.musify.R
import com.alecocluc.musify.databinding.ItemSongBinding
import com.alecocluc.musify.databinding.ItemSongSearchBinding
import com.alecocluc.musify.models.Song
import com.squareup.picasso.Picasso

class SongAdapter(
    var songs: List<Song>,
    private val onFavoriteClick: (Song) -> Unit,
    private val onRemoveFavoriteClick: ((Song) -> Unit)? = null,
    private val showSavedIcon: Boolean = false,
    private val useSearchLayout: Boolean = false // Nuevo parámetro para elegir el layout
) : RecyclerView.Adapter<SongAdapter.SongViewHolder>() {

    private var mediaPlayer: MediaPlayer? = null
    private var currentPlayingPosition: Int = -1
    private val handler = Handler(Looper.getMainLooper())

    // Limpia el estado de la canción anterior
    private fun clearPreviousSongState() {
        mediaPlayer?.release()
        mediaPlayer = null
        if (currentPlayingPosition != -1) {
            notifyItemChanged(currentPlayingPosition)
            currentPlayingPosition = -1
        }
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): SongViewHolder {
        val inflater = LayoutInflater.from(parent.context)
        return if (useSearchLayout) {
            val binding = ItemSongSearchBinding.inflate(inflater, parent, false)
            SongViewHolder(binding, parent.context)
        } else {
            val binding = ItemSongBinding.inflate(inflater, parent, false)
            SongViewHolder(binding, parent.context)
        }
    }

    override fun onBindViewHolder(holder: SongViewHolder, position: Int) {
        val song = songs[position]
        holder.bind(song)
    }

    override fun getItemCount(): Int = songs.size

    // Actualiza la lista de canciones
    fun updateSongs(newSongs: List<Song>) {
        songs = newSongs
        notifyDataSetChanged()
    }

    // Actualiza el estado de favorito de una canción específica
    fun updateFavoriteStatus(songId: Long, isFavorite: Boolean) {
        val songIndex = songs.indexOfFirst { it.id == songId }
        if (songIndex != -1) {
            val updatedSong = songs[songIndex].copy(isFavorite = isFavorite)
            songs = songs.toMutableList().apply {
                set(songIndex, updatedSong)
            }
            notifyItemChanged(songIndex)
        }
    }

    inner class SongViewHolder(private val binding: Any, private val context: Context) :
        RecyclerView.ViewHolder((binding as? ItemSongBinding ?: binding as ItemSongSearchBinding).root) {

        private val updateProgress = object : Runnable {
            override fun run() {
                mediaPlayer?.let {
                    if (binding is ItemSongBinding) {
                        binding.progressBar.progress = it.currentPosition / 1000
                    }
                    handler.postDelayed(this, 1000)
                }
            }
        }

        fun bind(song: Song) {
            when (binding) {
                is ItemSongBinding -> bindLibraryLayout(binding, song)
                is ItemSongSearchBinding -> bindSearchLayout(binding, song)
            }
        }

        private fun bindLibraryLayout(binding: ItemSongBinding, song: Song) {
            binding.songTitleTextView.text = song.title
            binding.artistNameTextView.text = song.artist
            binding.durationTextView.text = context.getString(R.string.song_duration, song.duration)
            Picasso.get().load(song.coverUrl).into(binding.coverImageView)

            // Configura el icono de favorito
            if (showSavedIcon || song.isFavorite) {
                binding.favoriteImageView.setImageResource(R.drawable.ic_star_saved)
                binding.favoriteImageView.setOnClickListener {
                    onRemoveFavoriteClick?.invoke(song)
                }
            } else {
                binding.favoriteImageView.setImageResource(R.drawable.ic_star)
                binding.favoriteImageView.setOnClickListener {
                    onFavoriteClick(song)
                }
            }

            setupPlayPauseButton(binding, song)
        }

        private fun bindSearchLayout(binding: ItemSongSearchBinding, song: Song) {
            binding.songTitleTextView.text = song.title
            binding.artistNameTextView.text = song.artist
            Picasso.get().load(song.coverUrl).into(binding.coverImageView)

            // Configura el icono de favorito para el layout de búsqueda
            if (song.isFavorite) {
                binding.favoriteImageView.setImageResource(R.drawable.ic_star_saved)
                binding.favoriteImageView.setOnClickListener {
                    onRemoveFavoriteClick?.invoke(song)
                }
            } else {
                binding.favoriteImageView.setImageResource(R.drawable.ic_star)
                binding.favoriteImageView.setOnClickListener {
                    onFavoriteClick(song)
                }
            }
        }

        private fun setupPlayPauseButton(binding: ItemSongBinding, song: Song) {
            if (bindingAdapterPosition == currentPlayingPosition) {
                binding.playPauseImageView.setImageResource(R.drawable.ic_pause)
                handler.post(updateProgress)
            } else {
                binding.playPauseImageView.setImageResource(R.drawable.ic_play)
                binding.progressBar.progress = 0
                handler.removeCallbacks(updateProgress)
            }

            binding.playPauseImageView.setOnClickListener {
                if (bindingAdapterPosition == currentPlayingPosition) {
                    toggleMediaPlayer(binding)
                } else {
                    clearPreviousSongState()
                    playNewSong(binding, song)
                }
            }
        }

        private fun toggleMediaPlayer(binding: ItemSongBinding) {
            mediaPlayer?.let {
                if (it.isPlaying) {
                    it.pause()
                    binding.playPauseImageView.setImageResource(R.drawable.ic_play)
                } else {
                    it.start()
                    binding.playPauseImageView.setImageResource(R.drawable.ic_pause)
                    handler.post(updateProgress)
                }
            }
        }

        private fun playNewSong(binding: ItemSongBinding, song: Song) {
            mediaPlayer = MediaPlayer().apply {
                setDataSource(song.previewUrl)
                setOnPreparedListener {
                    start()
                    binding.playPauseImageView.setImageResource(R.drawable.ic_pause)
                    binding.progressBar.max = duration / 1000
                    binding.progressBar.progress = 0
                    handler.post(updateProgress)
                }
                setOnCompletionListener {
                    binding.playPauseImageView.setImageResource(R.drawable.ic_play)
                    binding.progressBar.progress = 0
                    handler.removeCallbacks(updateProgress)
                }
                prepareAsync()
            }
            currentPlayingPosition = bindingAdapterPosition
        }
    }
}
